[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "git-commit-visualization-utilities"
version = "2.0.0"
description = "A comprehensive toolkit for analyzing and visualizing Git commit patterns with Pydantic validation and schema.org support"
readme = "README.md"
license = {file = "LICENSE.md"}
authors = [
    {name = "Alyshia Ledlie", email = "alyshia@inventoryai.com"}
]
maintainers = [
    {name = "Alyshia Ledlie", email = "alyshia@inventoryai.com"}
]
keywords = [
    "git", "commit-analysis", "data-visualization", "charts",
    "development-tools", "repository-analytics", "matplotlib",
    "python", "mcp-server", "pydantic", "schema-org"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Tools",
    "Topic :: Software Development :: Version Control :: Git",
    "Topic :: Scientific/Engineering :: Visualization",
    "Topic :: Utilities"
]
requires-python = ">=3.11"
dependencies = [
    "pydantic>=2.0.0",
    "matplotlib>=3.7.0",
    "numpy>=1.24.0",
    "mcp[cli]>=0.1.0",
    "python-dateutil>=2.8.0"
    "uv>=0.8.13"
]

[project.optional-dependencies]
database = [
    "sqlalchemy>=2.0.0",
    "alembic>=1.12.0"
]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0"
]
docs = [
    "sphinx>=6.0.0",
    "sphinx-rtd-theme>=1.2.0"
]
validation = [
    "jsonschema>=4.0.0"
]
all = [
    "git-commit-visualization-utilities[database,dev,docs,validation]"
]

[project.urls]
Homepage = "https://github.com/alyshialedlie/RepoViz"
Documentation = "https://github.com/alyshialedlie/RepoViz#readme"
Repository = "https://github.com/alyshialedlie/RepoViz"
Issues = "https://github.com/alyshialedlie/RepoViz/issues"
Changelog = "https://github.com/alyshialedlie/RepoViz/releases"

[project.scripts]
git-viz = "enhanced_plot_scripts:main"
git-viz-server = "enhanced_mcp_server:main"
git-viz-examples = "examples.example_configs:main"

[tool.setuptools]
packages = ["schemas", "schema_org", "enhanced_plot_scripts", "database_schema", "examples"]
include-package-data = true

[tool.setuptools.package-data]
"*" = ["*.sh", "*.txt", "*.json", "*.jsonld", "*.md"]

# Black code formatting
[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311', 'py312', 'py313']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# Flake8 linting
[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503"]
exclude = [
    ".git",
    "__pycache__",
    ".venv",
    "build",
    "dist",
    "*.egg-info"
]

# MyPy type checking
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "matplotlib.*",
    "numpy.*",
    "mcp.*"
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests"
]

# Coverage configuration
[tool.coverage.run]
source = ["schemas", "schema_org", "enhanced_plot_scripts", "database_schema"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup_enhanced.py",
    "examples/*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:"
]

# Pydantic configuration
[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true
warn_untyped_fields = true

# Additional tool configurations
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["schemas", "schema_org", "enhanced_plot_scripts", "database_schema"]

[tool.bandit]
exclude_dirs = ["tests", "examples"]
skips = ["B101", "B601"]  # Skip assert_used and shell_injection for our shell scripts
